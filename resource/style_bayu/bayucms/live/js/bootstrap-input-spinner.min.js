/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/bootstrap-input-spinner@1.11.3/src/bootstrap-input-spinner.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
! function(t) {
    "use strict";
    var n = !1,
        e = t.fn.val;

    function o(t, e) { t.addEventListener("mousedown", function(t) { t.preventDefault(), e(t) }), t.addEventListener("touchstart", function(t) { t.cancelable && t.preventDefault(), e(t) }), t.addEventListener("keydown", function(t) { 32 !== t.keyCode || n || (n = !0, e(t)) }) }
    t.fn.val = function(t) { return arguments.length >= 1 && this[0] && this[0]["bootstrap-input-spinner"] && this[0].setValue && this[0].setValue(t), e.apply(this, arguments) }, t.fn.InputSpinner = t.fn.inputSpinner = function(e) {
        var a = { decrementButton: "<strong>-</strong>", incrementButton: "<strong>+</strong>", groupClass: "", buttonsClass: "btn-outline-secondary", buttonsWidth: "2.5rem", textAlign: "center", autoDelay: 500, autoInterval: 100, boostThreshold: 10, boostMultiplier: "auto", locale: null };
        for (var r in e) a[r] = e[r];
        var i = '<div class="input-group ' + a.groupClass + '"><div class="input-group-prepend"><button style="min-width: ' + a.buttonsWidth + '" class="btn btn-decrement ' + a.buttonsClass + '" type="button">' + a.decrementButton + '</button></div><input type="text" readonly="readonly" style="text-align: ' + a.textAlign + '" class="form-control"/><div class="input-group-append"><button style="min-width: ' + a.buttonsWidth + '" class="btn btn-increment ' + a.buttonsClass + '" type="button">' + a.incrementButton + "</button></div></div>",
            u = a.locale || navigator.language || "en-US";
        this.each(function() {
            var e = t(this);
            e[0]["bootstrap-input-spinner"] = !0, e.hide();
            var r = null,
                s = null,
                p = "auto" === a.boostMultiplier,
                l = p ? 1 : a.boostMultiplier,
                c = t(i),
                d = c.find(".btn-decrement"),
                f = c.find(".btn-increment"),
                v = c.find("input"),
                m = null,
                b = null,
                g = null,
                h = null,
                y = null;
            V();
            var x, E, M = new Intl.NumberFormat(u, { minimumFractionDigits: y, maximumFractionDigits: y }),
                w = parseFloat(e[0].value),
                C = 0,
                F = e.attr("data-prefix") || "",
                I = e.attr("data-suffix") || "";
            if (F) {
                var N = t('<span class="input-group-text">' + F + "</span>");
                c.find(".input-group-prepend").append(N)
            }
            if (I) {
                var T = t('<span class="input-group-text">' + I + "</span>");
                c.find(".input-group-append").prepend(T)
            }

            function D(t, n) { void 0 === n && (n = !0), isNaN(t) || "" === t ? (e[0].value = "", n && (v[0].value = ""), w = 0) : (t = parseFloat(t), t = Math.min(Math.max(t, m), b), t = Math.round(t * Math.pow(10, y)) / Math.pow(10, y), e[0].value = t, n && (v[0].value = M.format(t)), w = t) }

            function L(t, n) { n && setTimeout(function() { var e; "function" == typeof Event ? e = new Event(n, { bubbles: !0 }) : (e = document.createEvent("Event")).initEvent(n, !0, !0), t[0].dispatchEvent(e) }) }

            function B(t) { v[0].disabled || (k(t), S(), r = setTimeout(function() { s = setInterval(function() { C > a.boostThreshold ? p ? (k(t * parseInt(l, 10)), l < 1e8 && (l *= 1.1), h && (l = Math.min(h, l))) : k(t * l) : k(t), C++ }, a.autoInterval) }, a.autoDelay)) }

            function k(t) { isNaN(w) && (w = 0), D(Math.round(w / t) * t + t), L(e, "input"), L(e, "change") }

            function S() { C = 0, l = l = p ? 1 : a.boostMultiplier, clearTimeout(r), clearTimeout(s) }

            function V() {
                v.prop("required", e.prop("required")), v.prop("placeholder", e.prop("placeholder"));
                var t = e.prop("disabled");
                v.prop("disabled", t), f.prop("disabled", t), d.prop("disabled", t), t && S();
                var n = e.prop("class"),
                    o = "";
                /form-control-sm/g.test(n) ? o = "input-group-sm" : /form-control-lg/g.test(n) && (o = "input-group-lg");
                var r = n.replace(/form-control(-(sm|lg))?/g, "");
                c.prop("class", "input-group " + o + " " + a.groupClass), v.prop("class", "form-control " + r), m = parseFloat(e.prop("min")) || 0, b = isNaN(e.prop("max")) || "" === e.prop("max") ? 1 / 0 : parseFloat(e.prop("max")), g = parseFloat(e.prop("step")) || 1, h = parseInt(e.attr("data-step-max")) || 0, y = parseInt(e.attr("data-decimals")) || 0
            }
            e[0].setValue = function(t) { D(t) }, new MutationObserver(function() { V(), D(w, !0) }).observe(e[0], { attributes: !0 }), e.after(c), D(w), v.on("paste input change focusout", function(t) {
                var n = v[0].value,
                    o = "focusout" === t.type;
                "en-US" !== u && "en-GB" !== u && "th-TH" !== u && (n = n.replace(/[. ]/g, "").replace(/,/g, ".")), D(n, o), L(e, t.type)
            }), o(d[0], function() { B(-g) }), o(f[0], function() { B(g) }), x = document.body, E = function() { S() }, x.addEventListener("mouseup", function(t) { E(t) }), x.addEventListener("touchend", function(t) { E(t) }), x.addEventListener("keyup", function(t) { 32 === t.keyCode && (n = !1, E(t)) })
        })
    }
}(jQuery);
//# sourceMappingURL=/sm/70d64e3bf39f73abb90b12d04ef0a25762a34af33a8da39c6bdabffa56d8c097.map